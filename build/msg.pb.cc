// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#include "msg.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace test_2 {
constexpr usr_login::usr_login(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : usrname_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , usrpasswd_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct usr_loginDefaultTypeInternal {
  constexpr usr_loginDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~usr_loginDefaultTypeInternal() {}
  union {
    usr_login _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT usr_loginDefaultTypeInternal _usr_login_default_instance_;
constexpr usr_info::usr_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : studentid_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , classrome_(0){}
struct usr_infoDefaultTypeInternal {
  constexpr usr_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~usr_infoDefaultTypeInternal() {}
  union {
    usr_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT usr_infoDefaultTypeInternal _usr_info_default_instance_;
constexpr student::student(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : array_()
  , _array_cached_byte_size_(0)
  , usrlogin_(nullptr)
  , usrinfo_(nullptr)
  , stamp_(0){}
struct studentDefaultTypeInternal {
  constexpr studentDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~studentDefaultTypeInternal() {}
  union {
    student _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT studentDefaultTypeInternal _student_default_instance_;
constexpr row_data::row_data(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : value_datas_()
  , column_count_(0){}
struct row_dataDefaultTypeInternal {
  constexpr row_dataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~row_dataDefaultTypeInternal() {}
  union {
    row_data _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT row_dataDefaultTypeInternal _row_data_default_instance_;
constexpr field_squence::field_squence(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : levels_()
  , _levels_cached_byte_size_(0)
  , field_(){}
struct field_squenceDefaultTypeInternal {
  constexpr field_squenceDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~field_squenceDefaultTypeInternal() {}
  union {
    field_squence _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT field_squenceDefaultTypeInternal _field_squence_default_instance_;
constexpr table_info::table_info(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : filed_names_()
  , filed_types_()
  , filed_sequences_()
  , row_lists_()
  , table_name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , row_count_(0)
  , column_count_(0){}
struct table_infoDefaultTypeInternal {
  constexpr table_infoDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~table_infoDefaultTypeInternal() {}
  union {
    table_info _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT table_infoDefaultTypeInternal _table_info_default_instance_;
}  // namespace test_2
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msg_2eproto[6];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msg_2eproto[1];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msg_2eproto = nullptr;

const uint32_t TableStruct_msg_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_login, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_login, usrname_),
  PROTOBUF_FIELD_OFFSET(::test_2::usr_login, usrpasswd_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::usr_info, classrome_),
  PROTOBUF_FIELD_OFFSET(::test_2::usr_info, studentid_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::student, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::student, stamp_),
  PROTOBUF_FIELD_OFFSET(::test_2::student, usrlogin_),
  PROTOBUF_FIELD_OFFSET(::test_2::student, usrinfo_),
  PROTOBUF_FIELD_OFFSET(::test_2::student, array_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::row_data, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::row_data, column_count_),
  PROTOBUF_FIELD_OFFSET(::test_2::row_data, value_datas_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::field_squence, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::field_squence, levels_),
  PROTOBUF_FIELD_OFFSET(::test_2::field_squence, field_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, table_name_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, row_count_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, column_count_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, filed_names_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, filed_types_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, filed_sequences_),
  PROTOBUF_FIELD_OFFSET(::test_2::table_info, row_lists_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::test_2::usr_login)},
  { 8, -1, -1, sizeof(::test_2::usr_info)},
  { 16, -1, -1, sizeof(::test_2::student)},
  { 26, -1, -1, sizeof(::test_2::row_data)},
  { 34, -1, -1, sizeof(::test_2::field_squence)},
  { 42, -1, -1, sizeof(::test_2::table_info)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_usr_login_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_usr_info_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_student_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_row_data_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_field_squence_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::test_2::_table_info_default_instance_),
};

const char descriptor_table_protodef_msg_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\tmsg.proto\022\006test_2\"/\n\tusr_login\022\017\n\007usrn"
  "ame\030\001 \001(\t\022\021\n\tusrpasswd\030\002 \001(\t\"0\n\010usr_info"
  "\022\021\n\tclassrome\030\001 \001(\005\022\021\n\tstudentID\030\002 \001(\t\"o"
  "\n\007student\022\r\n\005STAMP\030\001 \001(\005\022#\n\010usrLogin\030\002 \001"
  "(\0132\021.test_2.usr_login\022!\n\007usrInfo\030\003 \001(\0132\020"
  ".test_2.usr_info\022\r\n\005array\030\004 \003(\005\"5\n\010row_d"
  "ata\022\024\n\014column_count\030\001 \001(\005\022\023\n\013value_datas"
  "\030\002 \003(\t\".\n\rfield_squence\022\016\n\006levels\030\001 \003(\005\022"
  "\r\n\005field\030\002 \003(\t\"\310\001\n\ntable_info\022\022\n\ntable_n"
  "ame\030\001 \001(\t\022\021\n\trow_count\030\002 \001(\005\022\024\n\014column_c"
  "ount\030\003 \001(\005\022\023\n\013filed_names\030\004 \003(\t\022\023\n\013filed"
  "_types\030\005 \003(\t\022.\n\017filed_sequences\030\006 \003(\0132\025."
  "test_2.field_squence\022#\n\trow_lists\030\007 \003(\0132"
  "\020.test_2.row_data*W\n\tDATA_TYPE\022\014\n\010L_NUMB"
  "ER\020\000\022\014\n\010L_STRING\020\001\022\n\n\006L_BOOL\020\002\022\022\n\016L_TABL"
  "E_STRING\020\003\022\016\n\nL_FUNCTION\020\004b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msg_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto = {
  false, false, 634, descriptor_table_protodef_msg_2eproto, "msg.proto", 
  &descriptor_table_msg_2eproto_once, nullptr, 0, 6,
  schemas, file_default_instances, TableStruct_msg_2eproto::offsets,
  file_level_metadata_msg_2eproto, file_level_enum_descriptors_msg_2eproto, file_level_service_descriptors_msg_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msg_2eproto_getter() {
  return &descriptor_table_msg_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msg_2eproto(&descriptor_table_msg_2eproto);
namespace test_2 {
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DATA_TYPE_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msg_2eproto);
  return file_level_enum_descriptors_msg_2eproto[0];
}
bool DATA_TYPE_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}


// ===================================================================

class usr_login::_Internal {
 public:
};

usr_login::usr_login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.usr_login)
}
usr_login::usr_login(const usr_login& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  usrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrname().empty()) {
    usrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usrname(), 
      GetArenaForAllocation());
  }
  usrpasswd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    usrpasswd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_usrpasswd().empty()) {
    usrpasswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_usrpasswd(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:test_2.usr_login)
}

inline void usr_login::SharedCtor() {
usrname_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
usrpasswd_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  usrpasswd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

usr_login::~usr_login() {
  // @@protoc_insertion_point(destructor:test_2.usr_login)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void usr_login::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  usrname_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  usrpasswd_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void usr_login::ArenaDtor(void* object) {
  usr_login* _this = reinterpret_cast< usr_login* >(object);
  (void)_this;
}
void usr_login::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void usr_login::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void usr_login::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.usr_login)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  usrname_.ClearToEmpty();
  usrpasswd_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* usr_login::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string usrname = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_usrname();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.usr_login.usrname"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string usrpasswd = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_usrpasswd();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.usr_login.usrpasswd"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* usr_login::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.usr_login)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string usrname = 1;
  if (!this->_internal_usrname().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrname().data(), static_cast<int>(this->_internal_usrname().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.usr_login.usrname");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_usrname(), target);
  }

  // string usrpasswd = 2;
  if (!this->_internal_usrpasswd().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_usrpasswd().data(), static_cast<int>(this->_internal_usrpasswd().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.usr_login.usrpasswd");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_usrpasswd(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.usr_login)
  return target;
}

size_t usr_login::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.usr_login)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string usrname = 1;
  if (!this->_internal_usrname().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrname());
  }

  // string usrpasswd = 2;
  if (!this->_internal_usrpasswd().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_usrpasswd());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData usr_login::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    usr_login::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*usr_login::GetClassData() const { return &_class_data_; }

void usr_login::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<usr_login *>(to)->MergeFrom(
      static_cast<const usr_login &>(from));
}


void usr_login::MergeFrom(const usr_login& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.usr_login)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_usrname().empty()) {
    _internal_set_usrname(from._internal_usrname());
  }
  if (!from._internal_usrpasswd().empty()) {
    _internal_set_usrpasswd(from._internal_usrpasswd());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void usr_login::CopyFrom(const usr_login& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.usr_login)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usr_login::IsInitialized() const {
  return true;
}

void usr_login::InternalSwap(usr_login* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &usrname_, lhs_arena,
      &other->usrname_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &usrpasswd_, lhs_arena,
      &other->usrpasswd_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata usr_login::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[0]);
}

// ===================================================================

class usr_info::_Internal {
 public:
};

usr_info::usr_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.usr_info)
}
usr_info::usr_info(const usr_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  studentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    studentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_studentid().empty()) {
    studentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_studentid(), 
      GetArenaForAllocation());
  }
  classrome_ = from.classrome_;
  // @@protoc_insertion_point(copy_constructor:test_2.usr_info)
}

inline void usr_info::SharedCtor() {
studentid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  studentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
classrome_ = 0;
}

usr_info::~usr_info() {
  // @@protoc_insertion_point(destructor:test_2.usr_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void usr_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  studentid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void usr_info::ArenaDtor(void* object) {
  usr_info* _this = reinterpret_cast< usr_info* >(object);
  (void)_this;
}
void usr_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void usr_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void usr_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.usr_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  studentid_.ClearToEmpty();
  classrome_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* usr_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 classrome = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          classrome_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string studentID = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_studentid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.usr_info.studentID"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* usr_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.usr_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 classrome = 1;
  if (this->_internal_classrome() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_classrome(), target);
  }

  // string studentID = 2;
  if (!this->_internal_studentid().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_studentid().data(), static_cast<int>(this->_internal_studentid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.usr_info.studentID");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_studentid(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.usr_info)
  return target;
}

size_t usr_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.usr_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string studentID = 2;
  if (!this->_internal_studentid().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_studentid());
  }

  // int32 classrome = 1;
  if (this->_internal_classrome() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_classrome());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData usr_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    usr_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*usr_info::GetClassData() const { return &_class_data_; }

void usr_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<usr_info *>(to)->MergeFrom(
      static_cast<const usr_info &>(from));
}


void usr_info::MergeFrom(const usr_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.usr_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_studentid().empty()) {
    _internal_set_studentid(from._internal_studentid());
  }
  if (from._internal_classrome() != 0) {
    _internal_set_classrome(from._internal_classrome());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void usr_info::CopyFrom(const usr_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.usr_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool usr_info::IsInitialized() const {
  return true;
}

void usr_info::InternalSwap(usr_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &studentid_, lhs_arena,
      &other->studentid_, rhs_arena
  );
  swap(classrome_, other->classrome_);
}

::PROTOBUF_NAMESPACE_ID::Metadata usr_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[1]);
}

// ===================================================================

class student::_Internal {
 public:
  static const ::test_2::usr_login& usrlogin(const student* msg);
  static const ::test_2::usr_info& usrinfo(const student* msg);
};

const ::test_2::usr_login&
student::_Internal::usrlogin(const student* msg) {
  return *msg->usrlogin_;
}
const ::test_2::usr_info&
student::_Internal::usrinfo(const student* msg) {
  return *msg->usrinfo_;
}
student::student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  array_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.student)
}
student::student(const student& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      array_(from.array_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_usrlogin()) {
    usrlogin_ = new ::test_2::usr_login(*from.usrlogin_);
  } else {
    usrlogin_ = nullptr;
  }
  if (from._internal_has_usrinfo()) {
    usrinfo_ = new ::test_2::usr_info(*from.usrinfo_);
  } else {
    usrinfo_ = nullptr;
  }
  stamp_ = from.stamp_;
  // @@protoc_insertion_point(copy_constructor:test_2.student)
}

inline void student::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&usrlogin_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&stamp_) -
    reinterpret_cast<char*>(&usrlogin_)) + sizeof(stamp_));
}

student::~student() {
  // @@protoc_insertion_point(destructor:test_2.student)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void student::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (this != internal_default_instance()) delete usrlogin_;
  if (this != internal_default_instance()) delete usrinfo_;
}

void student::ArenaDtor(void* object) {
  student* _this = reinterpret_cast< student* >(object);
  (void)_this;
}
void student::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void student::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void student::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.student)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  array_.Clear();
  if (GetArenaForAllocation() == nullptr && usrlogin_ != nullptr) {
    delete usrlogin_;
  }
  usrlogin_ = nullptr;
  if (GetArenaForAllocation() == nullptr && usrinfo_ != nullptr) {
    delete usrinfo_;
  }
  usrinfo_ = nullptr;
  stamp_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* student::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 STAMP = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          stamp_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .test_2.usr_login usrLogin = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_usrlogin(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .test_2.usr_info usrInfo = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_usrinfo(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated int32 array = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_array(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 32) {
          _internal_add_array(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* student::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.student)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 STAMP = 1;
  if (this->_internal_stamp() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_stamp(), target);
  }

  // .test_2.usr_login usrLogin = 2;
  if (this->_internal_has_usrlogin()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::usrlogin(this), target, stream);
  }

  // .test_2.usr_info usrInfo = 3;
  if (this->_internal_has_usrinfo()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::usrinfo(this), target, stream);
  }

  // repeated int32 array = 4;
  {
    int byte_size = _array_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          4, _internal_array(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.student)
  return target;
}

size_t student::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.student)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 array = 4;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->array_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _array_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .test_2.usr_login usrLogin = 2;
  if (this->_internal_has_usrlogin()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usrlogin_);
  }

  // .test_2.usr_info usrInfo = 3;
  if (this->_internal_has_usrinfo()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *usrinfo_);
  }

  // int32 STAMP = 1;
  if (this->_internal_stamp() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_stamp());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData student::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    student::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*student::GetClassData() const { return &_class_data_; }

void student::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<student *>(to)->MergeFrom(
      static_cast<const student &>(from));
}


void student::MergeFrom(const student& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.student)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  array_.MergeFrom(from.array_);
  if (from._internal_has_usrlogin()) {
    _internal_mutable_usrlogin()->::test_2::usr_login::MergeFrom(from._internal_usrlogin());
  }
  if (from._internal_has_usrinfo()) {
    _internal_mutable_usrinfo()->::test_2::usr_info::MergeFrom(from._internal_usrinfo());
  }
  if (from._internal_stamp() != 0) {
    _internal_set_stamp(from._internal_stamp());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void student::CopyFrom(const student& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.student)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool student::IsInitialized() const {
  return true;
}

void student::InternalSwap(student* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  array_.InternalSwap(&other->array_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(student, stamp_)
      + sizeof(student::stamp_)
      - PROTOBUF_FIELD_OFFSET(student, usrlogin_)>(
          reinterpret_cast<char*>(&usrlogin_),
          reinterpret_cast<char*>(&other->usrlogin_));
}

::PROTOBUF_NAMESPACE_ID::Metadata student::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[2]);
}

// ===================================================================

class row_data::_Internal {
 public:
};

row_data::row_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  value_datas_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.row_data)
}
row_data::row_data(const row_data& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      value_datas_(from.value_datas_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  column_count_ = from.column_count_;
  // @@protoc_insertion_point(copy_constructor:test_2.row_data)
}

inline void row_data::SharedCtor() {
column_count_ = 0;
}

row_data::~row_data() {
  // @@protoc_insertion_point(destructor:test_2.row_data)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void row_data::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void row_data::ArenaDtor(void* object) {
  row_data* _this = reinterpret_cast< row_data* >(object);
  (void)_this;
}
void row_data::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void row_data::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void row_data::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.row_data)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  value_datas_.Clear();
  column_count_ = 0;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* row_data::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 column_count = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string value_datas = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_value_datas();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.row_data.value_datas"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* row_data::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.row_data)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 column_count = 1;
  if (this->_internal_column_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_column_count(), target);
  }

  // repeated string value_datas = 2;
  for (int i = 0, n = this->_internal_value_datas_size(); i < n; i++) {
    const auto& s = this->_internal_value_datas(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.row_data.value_datas");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.row_data)
  return target;
}

size_t row_data::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.row_data)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string value_datas = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(value_datas_.size());
  for (int i = 0, n = value_datas_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      value_datas_.Get(i));
  }

  // int32 column_count = 1;
  if (this->_internal_column_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_column_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData row_data::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    row_data::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*row_data::GetClassData() const { return &_class_data_; }

void row_data::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<row_data *>(to)->MergeFrom(
      static_cast<const row_data &>(from));
}


void row_data::MergeFrom(const row_data& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.row_data)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  value_datas_.MergeFrom(from.value_datas_);
  if (from._internal_column_count() != 0) {
    _internal_set_column_count(from._internal_column_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void row_data::CopyFrom(const row_data& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.row_data)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool row_data::IsInitialized() const {
  return true;
}

void row_data::InternalSwap(row_data* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  value_datas_.InternalSwap(&other->value_datas_);
  swap(column_count_, other->column_count_);
}

::PROTOBUF_NAMESPACE_ID::Metadata row_data::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[3]);
}

// ===================================================================

class field_squence::_Internal {
 public:
};

field_squence::field_squence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  levels_(arena),
  field_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.field_squence)
}
field_squence::field_squence(const field_squence& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      levels_(from.levels_),
      field_(from.field_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:test_2.field_squence)
}

inline void field_squence::SharedCtor() {
}

field_squence::~field_squence() {
  // @@protoc_insertion_point(destructor:test_2.field_squence)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void field_squence::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void field_squence::ArenaDtor(void* object) {
  field_squence* _this = reinterpret_cast< field_squence* >(object);
  (void)_this;
}
void field_squence::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void field_squence::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void field_squence::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.field_squence)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  levels_.Clear();
  field_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* field_squence::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated int32 levels = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_levels(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<uint8_t>(tag) == 8) {
          _internal_add_levels(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string field = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_field();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.field_squence.field"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* field_squence::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.field_squence)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated int32 levels = 1;
  {
    int byte_size = _levels_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          1, _internal_levels(), byte_size, target);
    }
  }

  // repeated string field = 2;
  for (int i = 0, n = this->_internal_field_size(); i < n; i++) {
    const auto& s = this->_internal_field(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.field_squence.field");
    target = stream->WriteString(2, s, target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.field_squence)
  return target;
}

size_t field_squence::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.field_squence)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated int32 levels = 1;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->levels_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<int32_t>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _levels_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // repeated string field = 2;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(field_.size());
  for (int i = 0, n = field_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      field_.Get(i));
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData field_squence::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    field_squence::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*field_squence::GetClassData() const { return &_class_data_; }

void field_squence::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<field_squence *>(to)->MergeFrom(
      static_cast<const field_squence &>(from));
}


void field_squence::MergeFrom(const field_squence& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.field_squence)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  levels_.MergeFrom(from.levels_);
  field_.MergeFrom(from.field_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void field_squence::CopyFrom(const field_squence& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.field_squence)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool field_squence::IsInitialized() const {
  return true;
}

void field_squence::InternalSwap(field_squence* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  levels_.InternalSwap(&other->levels_);
  field_.InternalSwap(&other->field_);
}

::PROTOBUF_NAMESPACE_ID::Metadata field_squence::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[4]);
}

// ===================================================================

class table_info::_Internal {
 public:
};

table_info::table_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  filed_names_(arena),
  filed_types_(arena),
  filed_sequences_(arena),
  row_lists_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:test_2.table_info)
}
table_info::table_info(const table_info& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      filed_names_(from.filed_names_),
      filed_types_(from.filed_types_),
      filed_sequences_(from.filed_sequences_),
      row_lists_(from.row_lists_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_table_name().empty()) {
    table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_table_name(), 
      GetArenaForAllocation());
  }
  ::memcpy(&row_count_, &from.row_count_,
    static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
  // @@protoc_insertion_point(copy_constructor:test_2.table_info)
}

inline void table_info::SharedCtor() {
table_name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&row_count_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&column_count_) -
    reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
}

table_info::~table_info() {
  // @@protoc_insertion_point(destructor:test_2.table_info)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void table_info::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  table_name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void table_info::ArenaDtor(void* object) {
  table_info* _this = reinterpret_cast< table_info* >(object);
  (void)_this;
}
void table_info::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void table_info::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void table_info::Clear() {
// @@protoc_insertion_point(message_clear_start:test_2.table_info)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  filed_names_.Clear();
  filed_types_.Clear();
  filed_sequences_.Clear();
  row_lists_.Clear();
  table_name_.ClearToEmpty();
  ::memset(&row_count_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&column_count_) -
      reinterpret_cast<char*>(&row_count_)) + sizeof(column_count_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* table_info::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string table_name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_table_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.table_info.table_name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 row_count = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          row_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 column_count = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          column_count_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated string filed_names = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filed_names();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.table_info.filed_names"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated string filed_types = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr -= 1;
          do {
            ptr += 1;
            auto str = _internal_add_filed_types();
            ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
            CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "test_2.table_info.filed_types"));
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<42>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.field_squence filed_sequences = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_filed_sequences(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<50>(ptr));
        } else
          goto handle_unusual;
        continue;
      // repeated .test_2.row_data row_lists = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_row_lists(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<58>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* table_info::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:test_2.table_info)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_table_name().data(), static_cast<int>(this->_internal_table_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.table_info.table_name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_table_name(), target);
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_row_count(), target);
  }

  // int32 column_count = 3;
  if (this->_internal_column_count() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_column_count(), target);
  }

  // repeated string filed_names = 4;
  for (int i = 0, n = this->_internal_filed_names_size(); i < n; i++) {
    const auto& s = this->_internal_filed_names(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.table_info.filed_names");
    target = stream->WriteString(4, s, target);
  }

  // repeated string filed_types = 5;
  for (int i = 0, n = this->_internal_filed_types_size(); i < n; i++) {
    const auto& s = this->_internal_filed_types(i);
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      s.data(), static_cast<int>(s.length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "test_2.table_info.filed_types");
    target = stream->WriteString(5, s, target);
  }

  // repeated .test_2.field_squence filed_sequences = 6;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_filed_sequences_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(6, this->_internal_filed_sequences(i), target, stream);
  }

  // repeated .test_2.row_data row_lists = 7;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_row_lists_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(7, this->_internal_row_lists(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:test_2.table_info)
  return target;
}

size_t table_info::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:test_2.table_info)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated string filed_names = 4;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filed_names_.size());
  for (int i = 0, n = filed_names_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filed_names_.Get(i));
  }

  // repeated string filed_types = 5;
  total_size += 1 *
      ::PROTOBUF_NAMESPACE_ID::internal::FromIntSize(filed_types_.size());
  for (int i = 0, n = filed_types_.size(); i < n; i++) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
      filed_types_.Get(i));
  }

  // repeated .test_2.field_squence filed_sequences = 6;
  total_size += 1UL * this->_internal_filed_sequences_size();
  for (const auto& msg : this->filed_sequences_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .test_2.row_data row_lists = 7;
  total_size += 1UL * this->_internal_row_lists_size();
  for (const auto& msg : this->row_lists_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // string table_name = 1;
  if (!this->_internal_table_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_table_name());
  }

  // int32 row_count = 2;
  if (this->_internal_row_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_row_count());
  }

  // int32 column_count = 3;
  if (this->_internal_column_count() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_column_count());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData table_info::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    table_info::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*table_info::GetClassData() const { return &_class_data_; }

void table_info::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<table_info *>(to)->MergeFrom(
      static_cast<const table_info &>(from));
}


void table_info::MergeFrom(const table_info& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:test_2.table_info)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  filed_names_.MergeFrom(from.filed_names_);
  filed_types_.MergeFrom(from.filed_types_);
  filed_sequences_.MergeFrom(from.filed_sequences_);
  row_lists_.MergeFrom(from.row_lists_);
  if (!from._internal_table_name().empty()) {
    _internal_set_table_name(from._internal_table_name());
  }
  if (from._internal_row_count() != 0) {
    _internal_set_row_count(from._internal_row_count());
  }
  if (from._internal_column_count() != 0) {
    _internal_set_column_count(from._internal_column_count());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void table_info::CopyFrom(const table_info& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:test_2.table_info)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool table_info::IsInitialized() const {
  return true;
}

void table_info::InternalSwap(table_info* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  filed_names_.InternalSwap(&other->filed_names_);
  filed_types_.InternalSwap(&other->filed_types_);
  filed_sequences_.InternalSwap(&other->filed_sequences_);
  row_lists_.InternalSwap(&other->row_lists_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &table_name_, lhs_arena,
      &other->table_name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(table_info, column_count_)
      + sizeof(table_info::column_count_)
      - PROTOBUF_FIELD_OFFSET(table_info, row_count_)>(
          reinterpret_cast<char*>(&row_count_),
          reinterpret_cast<char*>(&other->row_count_));
}

::PROTOBUF_NAMESPACE_ID::Metadata table_info::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msg_2eproto_getter, &descriptor_table_msg_2eproto_once,
      file_level_metadata_msg_2eproto[5]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace test_2
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::test_2::usr_login* Arena::CreateMaybeMessage< ::test_2::usr_login >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::usr_login >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::usr_info* Arena::CreateMaybeMessage< ::test_2::usr_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::usr_info >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::student* Arena::CreateMaybeMessage< ::test_2::student >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::student >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::row_data* Arena::CreateMaybeMessage< ::test_2::row_data >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::row_data >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::field_squence* Arena::CreateMaybeMessage< ::test_2::field_squence >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::field_squence >(arena);
}
template<> PROTOBUF_NOINLINE ::test_2::table_info* Arena::CreateMaybeMessage< ::test_2::table_info >(Arena* arena) {
  return Arena::CreateMessageInternal< ::test_2::table_info >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
