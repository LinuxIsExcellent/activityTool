syntax = "proto3";

package test_2;

//客户端消息协议
enum client_msg
{
	REQUEST_LOGIN									= 0;	//客户端请求登陆
	REQUSET_LUA_TABLE_DATA							= 1;	//请求二维表文件数据
	REQUSET_SAVE_TABLE_DATA							= 2;	//请求保存二维表数据
	REQUSET_SHELL_OPTIONS							= 3;	//客户端请求执行shell指令
	REQUEST_SAVE_TABLE_INFO							= 4;	//客户端请求保存二维表的外围信息
	REQUEST_MODIFY_SERVER_TIME						= 5;	//请求修改服务器时间
	REQUSET_LUA_LIST_DATA							= 6;	//请求一维表文件数据
	REQUSET_SAVE_LUA_LIST_DATA						= 7;	//请求保存一维表数据
	REQUSET_FIELD_LINK_INFO							= 8;	//请求关联信息
	REQUSET_FIELD_INFO_BY_LINK						= 9;	//客户端根据字段的关联信息请求字段的所有值
}

//服务器消息协议
enum server_msg
{
	SEND_FILE_TREE_INFO								= 0;	//推送当前左边文件树的数据
	SEND_SERVER_TIME								= 1;	//推送当前服务器时间
	SEND_LUA_TABLE_DATA								= 2;	//推送单个二维表文件数据
	SEND_SHELL_CONFIG								= 3;	//推送可执行的shell指令
	SEND_OPTION_SHELL_PRINT							= 4;	//推送执行shell的打印
	SEND_LUA_LIST_DATA								= 5;	//推送单个一维表文件数据
	SEND_FIELD_LINK_DATA							= 6;	//推送关联信息
	SEND_PROCESS_STATUS_INFO						= 7;	//推送当前的进程的状态
	SEND_FIELD_INFO_BY_LINK							= 8;	//服务器返回字段的关联信息的所有值
}

//客户端请求登陆
message client_login_request
{
	
}

//推送左边文件树的数据
message server_send_file_tree_notify
{
	repeated bytes lua_file_names						= 1;	//一维表的文件名字列表
	repeated bytes lua_table_file_names					= 2;	//二维表的文件名字列表
	repeated bytes group_names							= 3;	//组合的名字列表
}

// 推送可执行的shell指令
message server_send_shell_config_notify
{
	repeated bytes shell_ops							= 1;	//shell指令列表
}

//客户端请求二维表文件数据
message client_lua_table_data_quest
{
	bytes file_name								= 1;	//文件名字
	bytes link_info								= 2;	//连接跳转信息
}

//客户端请求执行shell指令
message client_shell_option_quest
{
	bytes option									= 1;	//指令名字
}

//推送当前服务器时间
message server_send_current_time_notify
{
	int64 time_stamp 								= 1;	//当前服务器时间
	bytes time_zone 								= 2;	//时区
}

enum DATA_TYPE
{
	L_NUMBER 										= 0;	//数字类型
	L_STRING 										= 1;	//字符串类型
	L_BOOL 											= 2;	//bool类型
	L_TABLE_STRING 									= 3;	//字符串类型的table {a}
	L_FUNCTION 										= 4;	//字符串类型的function
}

message pair_value
{
	bytes  key									= 1;	//键值
	bytes  value								= 2;	//数值
}

message field_type_pair
{
	bytes key									= 1;	//字段
	int32 lua_type								= 2;	//数据的类型
}

//一行的数据
message row_data
{
	bytes  key 								= 1;	//当前行的key
	repeated pair_value pair 				= 2;	//列数据列表
}

//字段的信息
message field_info
{
	bytes field_name 						= 1;	//字段名字
	bytes field_desc 						= 2;	//字段的描述
	bytes field_link 						= 3;	//字段的关联
}

//levels :
//如果为空的话，证明这个squence代表的是最外层的字段顺序。
//如果levels为{[n]},则代表的是第n个字段为table的表的顺序
//如果levels为{[n],[m]},则代表的是第n个字段为table的表的第m个字段为table的表的顺序(就证明这个表就是多层结构了)
message field_squence
{
	string 	 index 								= 1;	//索引
	repeated field_info infos					= 2;	//字段顺序
}

//一张表的数据(仅仅只是二维程度的展开，如果有多维，则更深维度的表直接转换成string类型的数据)
message table_data
{
	bytes               		 table_name 			= 1;	//表名
	int32			     		 row_count 				= 2;	//多少行
	int32	             		 column_count 			= 3;	//多少列

	repeated bytes       		 filed_names 			= 4;	//字段名（直接从lua配置表读取到的字段顺序）
	repeated field_type_pair     filed_types 			= 5;	//字段的类型(跟字段名一一对应, 规定lua的二维表每行配置字段名对应的字段的类型是一致的)
	repeated row_data    		 row_lists 				= 6;	//行数据列表

	//下面这部分有可能是没有的，一些由client手动配置的信息（字段顺序，字段标注，活动的字段组合）
	repeated field_squence 		 filed_sequences 		= 7;	//字段名展示的顺序(因为lua里面的key-value对象解析出来不是有序的，所以需要人为定义一个展示顺序，这个顺序是由client手动调整的，然后记录在中间配置文件中)
	bytes    					 link_info 				= 8;	//附带的链接信息(如果有，就会跳转到对应的行列)
}

//客户端请求保存二维表数据
message client_save_table_data_request
{
	bytes  table_name 							= 1;	//表名
	repeated row_data   row_lists 				= 2;	//行数据列表	
}

//服务器返回推送执行shell的打印
message send_shell_option_print_notify
{
	bytes  	line  							= 1;	//打印行数据
	int32  	flag  							= 2; 	//是否结束(0: 未结束 1:结束)
}

//客户端请求保存二维表的外围信息
message client_save_table_info_request
{
	bytes   					 table_name 				= 1;	//表名
	repeated field_squence 		 field_squences 			= 2;	//二维表的字段信息
}

//服务器推送当前服务器时间
message send_server_current_time_nofity
{
	int64		time 							= 1;	//当前服务器时间戳
}

//请求修改服务器时间
message client_modify_server_time_quest
{
	int64		time 							= 1;	//请求修改的时间戳
}

//客户端请求一维表文件数据
message client_lua_list_data_quest
{
	bytes file_name								= 1;	//文件名字
	bytes link_info								= 2;	//连接跳转信息
}

message field_type_key_value
{
	bytes  key									= 1;	//字段
	bytes  value								= 2;	//数据
	int32  type 								= 3;	//类型
}

//服务器返回一维表的数据
message send_lua_list_data_notify
{
	bytes               		 		table_name 			= 1;	//表名
	repeated field_type_key_value     	filed_types 		= 2;	//每列的数据
	repeated field_squence 		 		filed_sequences 	= 3;	//表的外围信息
	bytes 								link_info			= 4;	//连接跳转信息
}

//客户端请求保存一维表数据
message save_lua_list_data_request
{
	bytes               		 		table_name 			= 1;	//表名
	repeated field_type_key_value     	filed_types 		= 2;	//每列的数据
}


//客户端请求关联的信息
message client_field_link_info_quest
{
	
}

//表的字段信息
message table_field_list
{
	bytes 							table_name 			= 1;			//表名
	repeated bytes 					fields 				= 2;			//字段列表
}

//服务器返回关联的信息
message send_field_link_info
{
	repeated table_field_list 		table 				= 1;			//二维表
	repeated table_field_list 		list 				= 2;			//一维表
}

message process_statue_info
{
	bytes 							process_name 		= 2;			//进程名字
	int32  							statue				= 3;			//进程状态
}

//发送服务器监听的进程的状态
message send_process_listening_status_info
{
	repeated  process_statue_info infos = 1;
}

//客户端根据字段的关联请求对应表的字段信息
message client_request_field_link_info
{
	bytes 							link_info 			= 1;			//关联的信息
}

message link_field_info
{
	bytes 							field_value 		= 1;			//字段值
	bytes 							field_desc 			= 2;			//字段的备注(只有在键值对的时候这个字段才会有备注)
}

// 服务器返回字段对应的关联信息的字段信息
message send_field_all_values_info
{
	bytes 							link_info 			= 1;			//关联的信息
	repeated 	link_field_info		infos 				= 2;			//字段信息列表
}