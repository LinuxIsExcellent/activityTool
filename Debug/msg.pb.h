// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msg.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_msg_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3019000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3019001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_msg_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_msg_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[6]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const uint32_t offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msg_2eproto;
namespace test_2 {
class field_squence;
struct field_squenceDefaultTypeInternal;
extern field_squenceDefaultTypeInternal _field_squence_default_instance_;
class row_data;
struct row_dataDefaultTypeInternal;
extern row_dataDefaultTypeInternal _row_data_default_instance_;
class student;
struct studentDefaultTypeInternal;
extern studentDefaultTypeInternal _student_default_instance_;
class table_info;
struct table_infoDefaultTypeInternal;
extern table_infoDefaultTypeInternal _table_info_default_instance_;
class usr_info;
struct usr_infoDefaultTypeInternal;
extern usr_infoDefaultTypeInternal _usr_info_default_instance_;
class usr_login;
struct usr_loginDefaultTypeInternal;
extern usr_loginDefaultTypeInternal _usr_login_default_instance_;
}  // namespace test_2
PROTOBUF_NAMESPACE_OPEN
template<> ::test_2::field_squence* Arena::CreateMaybeMessage<::test_2::field_squence>(Arena*);
template<> ::test_2::row_data* Arena::CreateMaybeMessage<::test_2::row_data>(Arena*);
template<> ::test_2::student* Arena::CreateMaybeMessage<::test_2::student>(Arena*);
template<> ::test_2::table_info* Arena::CreateMaybeMessage<::test_2::table_info>(Arena*);
template<> ::test_2::usr_info* Arena::CreateMaybeMessage<::test_2::usr_info>(Arena*);
template<> ::test_2::usr_login* Arena::CreateMaybeMessage<::test_2::usr_login>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace test_2 {

enum DATA_TYPE : int {
  L_NUMBER = 0,
  L_STRING = 1,
  L_BOOL = 2,
  L_TABLE_STRING = 3,
  L_FUNCTION = 4,
  DATA_TYPE_INT_MIN_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::min(),
  DATA_TYPE_INT_MAX_SENTINEL_DO_NOT_USE_ = std::numeric_limits<int32_t>::max()
};
bool DATA_TYPE_IsValid(int value);
constexpr DATA_TYPE DATA_TYPE_MIN = L_NUMBER;
constexpr DATA_TYPE DATA_TYPE_MAX = L_FUNCTION;
constexpr int DATA_TYPE_ARRAYSIZE = DATA_TYPE_MAX + 1;

const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* DATA_TYPE_descriptor();
template<typename T>
inline const std::string& DATA_TYPE_Name(T enum_t_value) {
  static_assert(::std::is_same<T, DATA_TYPE>::value ||
    ::std::is_integral<T>::value,
    "Incorrect type passed to function DATA_TYPE_Name.");
  return ::PROTOBUF_NAMESPACE_ID::internal::NameOfEnum(
    DATA_TYPE_descriptor(), enum_t_value);
}
inline bool DATA_TYPE_Parse(
    ::PROTOBUF_NAMESPACE_ID::ConstStringParam name, DATA_TYPE* value) {
  return ::PROTOBUF_NAMESPACE_ID::internal::ParseNamedEnum<DATA_TYPE>(
    DATA_TYPE_descriptor(), name, value);
}
// ===================================================================

class usr_login final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.usr_login) */ {
 public:
  inline usr_login() : usr_login(nullptr) {}
  ~usr_login() override;
  explicit constexpr usr_login(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  usr_login(const usr_login& from);
  usr_login(usr_login&& from) noexcept
    : usr_login() {
    *this = ::std::move(from);
  }

  inline usr_login& operator=(const usr_login& from) {
    CopyFrom(from);
    return *this;
  }
  inline usr_login& operator=(usr_login&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const usr_login& default_instance() {
    return *internal_default_instance();
  }
  static inline const usr_login* internal_default_instance() {
    return reinterpret_cast<const usr_login*>(
               &_usr_login_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(usr_login& a, usr_login& b) {
    a.Swap(&b);
  }
  inline void Swap(usr_login* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(usr_login* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  usr_login* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<usr_login>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const usr_login& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const usr_login& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(usr_login* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.usr_login";
  }
  protected:
  explicit usr_login(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUsrnameFieldNumber = 1,
    kUsrpasswdFieldNumber = 2,
  };
  // string usrname = 1;
  void clear_usrname();
  const std::string& usrname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrname();
  PROTOBUF_NODISCARD std::string* release_usrname();
  void set_allocated_usrname(std::string* usrname);
  private:
  const std::string& _internal_usrname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrname(const std::string& value);
  std::string* _internal_mutable_usrname();
  public:

  // string usrpasswd = 2;
  void clear_usrpasswd();
  const std::string& usrpasswd() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_usrpasswd(ArgT0&& arg0, ArgT... args);
  std::string* mutable_usrpasswd();
  PROTOBUF_NODISCARD std::string* release_usrpasswd();
  void set_allocated_usrpasswd(std::string* usrpasswd);
  private:
  const std::string& _internal_usrpasswd() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_usrpasswd(const std::string& value);
  std::string* _internal_mutable_usrpasswd();
  public:

  // @@protoc_insertion_point(class_scope:test_2.usr_login)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr usrpasswd_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class usr_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.usr_info) */ {
 public:
  inline usr_info() : usr_info(nullptr) {}
  ~usr_info() override;
  explicit constexpr usr_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  usr_info(const usr_info& from);
  usr_info(usr_info&& from) noexcept
    : usr_info() {
    *this = ::std::move(from);
  }

  inline usr_info& operator=(const usr_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline usr_info& operator=(usr_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const usr_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const usr_info* internal_default_instance() {
    return reinterpret_cast<const usr_info*>(
               &_usr_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(usr_info& a, usr_info& b) {
    a.Swap(&b);
  }
  inline void Swap(usr_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(usr_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  usr_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<usr_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const usr_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const usr_info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(usr_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.usr_info";
  }
  protected:
  explicit usr_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudentIDFieldNumber = 2,
    kClassromeFieldNumber = 1,
  };
  // string studentID = 2;
  void clear_studentid();
  const std::string& studentid() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_studentid(ArgT0&& arg0, ArgT... args);
  std::string* mutable_studentid();
  PROTOBUF_NODISCARD std::string* release_studentid();
  void set_allocated_studentid(std::string* studentid);
  private:
  const std::string& _internal_studentid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_studentid(const std::string& value);
  std::string* _internal_mutable_studentid();
  public:

  // int32 classrome = 1;
  void clear_classrome();
  int32_t classrome() const;
  void set_classrome(int32_t value);
  private:
  int32_t _internal_classrome() const;
  void _internal_set_classrome(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.usr_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr studentid_;
  int32_t classrome_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.student) */ {
 public:
  inline student() : student(nullptr) {}
  ~student() override;
  explicit constexpr student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  student(const student& from);
  student(student&& from) noexcept
    : student() {
    *this = ::std::move(from);
  }

  inline student& operator=(const student& from) {
    CopyFrom(from);
    return *this;
  }
  inline student& operator=(student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const student& default_instance() {
    return *internal_default_instance();
  }
  static inline const student* internal_default_instance() {
    return reinterpret_cast<const student*>(
               &_student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(student& a, student& b) {
    a.Swap(&b);
  }
  inline void Swap(student* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<student>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const student& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const student& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(student* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.student";
  }
  protected:
  explicit student(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kArrayFieldNumber = 4,
    kUsrLoginFieldNumber = 2,
    kUsrInfoFieldNumber = 3,
    kSTAMPFieldNumber = 1,
  };
  // repeated int32 array = 4;
  int array_size() const;
  private:
  int _internal_array_size() const;
  public:
  void clear_array();
  private:
  int32_t _internal_array(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_array() const;
  void _internal_add_array(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_array();
  public:
  int32_t array(int index) const;
  void set_array(int index, int32_t value);
  void add_array(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      array() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_array();

  // .test_2.usr_login usrLogin = 2;
  bool has_usrlogin() const;
  private:
  bool _internal_has_usrlogin() const;
  public:
  void clear_usrlogin();
  const ::test_2::usr_login& usrlogin() const;
  PROTOBUF_NODISCARD ::test_2::usr_login* release_usrlogin();
  ::test_2::usr_login* mutable_usrlogin();
  void set_allocated_usrlogin(::test_2::usr_login* usrlogin);
  private:
  const ::test_2::usr_login& _internal_usrlogin() const;
  ::test_2::usr_login* _internal_mutable_usrlogin();
  public:
  void unsafe_arena_set_allocated_usrlogin(
      ::test_2::usr_login* usrlogin);
  ::test_2::usr_login* unsafe_arena_release_usrlogin();

  // .test_2.usr_info usrInfo = 3;
  bool has_usrinfo() const;
  private:
  bool _internal_has_usrinfo() const;
  public:
  void clear_usrinfo();
  const ::test_2::usr_info& usrinfo() const;
  PROTOBUF_NODISCARD ::test_2::usr_info* release_usrinfo();
  ::test_2::usr_info* mutable_usrinfo();
  void set_allocated_usrinfo(::test_2::usr_info* usrinfo);
  private:
  const ::test_2::usr_info& _internal_usrinfo() const;
  ::test_2::usr_info* _internal_mutable_usrinfo();
  public:
  void unsafe_arena_set_allocated_usrinfo(
      ::test_2::usr_info* usrinfo);
  ::test_2::usr_info* unsafe_arena_release_usrinfo();

  // int32 STAMP = 1;
  void clear_stamp();
  int32_t stamp() const;
  void set_stamp(int32_t value);
  private:
  int32_t _internal_stamp() const;
  void _internal_set_stamp(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > array_;
  mutable std::atomic<int> _array_cached_byte_size_;
  ::test_2::usr_login* usrlogin_;
  ::test_2::usr_info* usrinfo_;
  int32_t stamp_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class row_data final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.row_data) */ {
 public:
  inline row_data() : row_data(nullptr) {}
  ~row_data() override;
  explicit constexpr row_data(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  row_data(const row_data& from);
  row_data(row_data&& from) noexcept
    : row_data() {
    *this = ::std::move(from);
  }

  inline row_data& operator=(const row_data& from) {
    CopyFrom(from);
    return *this;
  }
  inline row_data& operator=(row_data&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const row_data& default_instance() {
    return *internal_default_instance();
  }
  static inline const row_data* internal_default_instance() {
    return reinterpret_cast<const row_data*>(
               &_row_data_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(row_data& a, row_data& b) {
    a.Swap(&b);
  }
  inline void Swap(row_data* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(row_data* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  row_data* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<row_data>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const row_data& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const row_data& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(row_data* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.row_data";
  }
  protected:
  explicit row_data(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValueDatasFieldNumber = 2,
    kColumnCountFieldNumber = 1,
  };
  // repeated string value_datas = 2;
  int value_datas_size() const;
  private:
  int _internal_value_datas_size() const;
  public:
  void clear_value_datas();
  const std::string& value_datas(int index) const;
  std::string* mutable_value_datas(int index);
  void set_value_datas(int index, const std::string& value);
  void set_value_datas(int index, std::string&& value);
  void set_value_datas(int index, const char* value);
  void set_value_datas(int index, const char* value, size_t size);
  std::string* add_value_datas();
  void add_value_datas(const std::string& value);
  void add_value_datas(std::string&& value);
  void add_value_datas(const char* value);
  void add_value_datas(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& value_datas() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_value_datas();
  private:
  const std::string& _internal_value_datas(int index) const;
  std::string* _internal_add_value_datas();
  public:

  // int32 column_count = 1;
  void clear_column_count();
  int32_t column_count() const;
  void set_column_count(int32_t value);
  private:
  int32_t _internal_column_count() const;
  void _internal_set_column_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.row_data)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> value_datas_;
  int32_t column_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class field_squence final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.field_squence) */ {
 public:
  inline field_squence() : field_squence(nullptr) {}
  ~field_squence() override;
  explicit constexpr field_squence(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  field_squence(const field_squence& from);
  field_squence(field_squence&& from) noexcept
    : field_squence() {
    *this = ::std::move(from);
  }

  inline field_squence& operator=(const field_squence& from) {
    CopyFrom(from);
    return *this;
  }
  inline field_squence& operator=(field_squence&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const field_squence& default_instance() {
    return *internal_default_instance();
  }
  static inline const field_squence* internal_default_instance() {
    return reinterpret_cast<const field_squence*>(
               &_field_squence_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(field_squence& a, field_squence& b) {
    a.Swap(&b);
  }
  inline void Swap(field_squence* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(field_squence* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  field_squence* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<field_squence>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const field_squence& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const field_squence& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(field_squence* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.field_squence";
  }
  protected:
  explicit field_squence(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLevelsFieldNumber = 1,
    kFieldFieldNumber = 2,
  };
  // repeated int32 levels = 1;
  int levels_size() const;
  private:
  int _internal_levels_size() const;
  public:
  void clear_levels();
  private:
  int32_t _internal_levels(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      _internal_levels() const;
  void _internal_add_levels(int32_t value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      _internal_mutable_levels();
  public:
  int32_t levels(int index) const;
  void set_levels(int index, int32_t value);
  void add_levels(int32_t value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
      levels() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
      mutable_levels();

  // repeated string field = 2;
  int field_size() const;
  private:
  int _internal_field_size() const;
  public:
  void clear_field();
  const std::string& field(int index) const;
  std::string* mutable_field(int index);
  void set_field(int index, const std::string& value);
  void set_field(int index, std::string&& value);
  void set_field(int index, const char* value);
  void set_field(int index, const char* value, size_t size);
  std::string* add_field();
  void add_field(const std::string& value);
  void add_field(std::string&& value);
  void add_field(const char* value);
  void add_field(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& field() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_field();
  private:
  const std::string& _internal_field(int index) const;
  std::string* _internal_add_field();
  public:

  // @@protoc_insertion_point(class_scope:test_2.field_squence)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t > levels_;
  mutable std::atomic<int> _levels_cached_byte_size_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> field_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// -------------------------------------------------------------------

class table_info final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:test_2.table_info) */ {
 public:
  inline table_info() : table_info(nullptr) {}
  ~table_info() override;
  explicit constexpr table_info(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  table_info(const table_info& from);
  table_info(table_info&& from) noexcept
    : table_info() {
    *this = ::std::move(from);
  }

  inline table_info& operator=(const table_info& from) {
    CopyFrom(from);
    return *this;
  }
  inline table_info& operator=(table_info&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetOwningArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const table_info& default_instance() {
    return *internal_default_instance();
  }
  static inline const table_info* internal_default_instance() {
    return reinterpret_cast<const table_info*>(
               &_table_info_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(table_info& a, table_info& b) {
    a.Swap(&b);
  }
  inline void Swap(table_info* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() != nullptr &&
        GetOwningArena() == other->GetOwningArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetOwningArena() == other->GetOwningArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(table_info* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  table_info* New(::PROTOBUF_NAMESPACE_ID::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<table_info>(arena);
  }
  using ::PROTOBUF_NAMESPACE_ID::Message::CopyFrom;
  void CopyFrom(const table_info& from);
  using ::PROTOBUF_NAMESPACE_ID::Message::MergeFrom;
  void MergeFrom(const table_info& from);
  private:
  static void MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to, const ::PROTOBUF_NAMESPACE_ID::Message& from);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  uint8_t* _InternalSerialize(
      uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(table_info* other);

  private:
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "test_2.table_info";
  }
  protected:
  explicit table_info(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                       bool is_message_owned = false);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  static const ClassData _class_data_;
  const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*GetClassData() const final;

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kFiledNamesFieldNumber = 4,
    kFiledTypesFieldNumber = 5,
    kFiledSequencesFieldNumber = 6,
    kRowListsFieldNumber = 7,
    kTableNameFieldNumber = 1,
    kRowCountFieldNumber = 2,
    kColumnCountFieldNumber = 3,
  };
  // repeated string filed_names = 4;
  int filed_names_size() const;
  private:
  int _internal_filed_names_size() const;
  public:
  void clear_filed_names();
  const std::string& filed_names(int index) const;
  std::string* mutable_filed_names(int index);
  void set_filed_names(int index, const std::string& value);
  void set_filed_names(int index, std::string&& value);
  void set_filed_names(int index, const char* value);
  void set_filed_names(int index, const char* value, size_t size);
  std::string* add_filed_names();
  void add_filed_names(const std::string& value);
  void add_filed_names(std::string&& value);
  void add_filed_names(const char* value);
  void add_filed_names(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filed_names() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filed_names();
  private:
  const std::string& _internal_filed_names(int index) const;
  std::string* _internal_add_filed_names();
  public:

  // repeated string filed_types = 5;
  int filed_types_size() const;
  private:
  int _internal_filed_types_size() const;
  public:
  void clear_filed_types();
  const std::string& filed_types(int index) const;
  std::string* mutable_filed_types(int index);
  void set_filed_types(int index, const std::string& value);
  void set_filed_types(int index, std::string&& value);
  void set_filed_types(int index, const char* value);
  void set_filed_types(int index, const char* value, size_t size);
  std::string* add_filed_types();
  void add_filed_types(const std::string& value);
  void add_filed_types(std::string&& value);
  void add_filed_types(const char* value);
  void add_filed_types(const char* value, size_t size);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>& filed_types() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>* mutable_filed_types();
  private:
  const std::string& _internal_filed_types(int index) const;
  std::string* _internal_add_filed_types();
  public:

  // repeated .test_2.field_squence filed_sequences = 6;
  int filed_sequences_size() const;
  private:
  int _internal_filed_sequences_size() const;
  public:
  void clear_filed_sequences();
  ::test_2::field_squence* mutable_filed_sequences(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
      mutable_filed_sequences();
  private:
  const ::test_2::field_squence& _internal_filed_sequences(int index) const;
  ::test_2::field_squence* _internal_add_filed_sequences();
  public:
  const ::test_2::field_squence& filed_sequences(int index) const;
  ::test_2::field_squence* add_filed_sequences();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
      filed_sequences() const;

  // repeated .test_2.row_data row_lists = 7;
  int row_lists_size() const;
  private:
  int _internal_row_lists_size() const;
  public:
  void clear_row_lists();
  ::test_2::row_data* mutable_row_lists(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >*
      mutable_row_lists();
  private:
  const ::test_2::row_data& _internal_row_lists(int index) const;
  ::test_2::row_data* _internal_add_row_lists();
  public:
  const ::test_2::row_data& row_lists(int index) const;
  ::test_2::row_data* add_row_lists();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >&
      row_lists() const;

  // string table_name = 1;
  void clear_table_name();
  const std::string& table_name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_table_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_table_name();
  PROTOBUF_NODISCARD std::string* release_table_name();
  void set_allocated_table_name(std::string* table_name);
  private:
  const std::string& _internal_table_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_table_name(const std::string& value);
  std::string* _internal_mutable_table_name();
  public:

  // int32 row_count = 2;
  void clear_row_count();
  int32_t row_count() const;
  void set_row_count(int32_t value);
  private:
  int32_t _internal_row_count() const;
  void _internal_set_row_count(int32_t value);
  public:

  // int32 column_count = 3;
  void clear_column_count();
  int32_t column_count() const;
  void set_column_count(int32_t value);
  private:
  int32_t _internal_column_count() const;
  void _internal_set_column_count(int32_t value);
  public:

  // @@protoc_insertion_point(class_scope:test_2.table_info)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filed_names_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string> filed_types_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence > filed_sequences_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data > row_lists_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr table_name_;
  int32_t row_count_;
  int32_t column_count_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_msg_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// usr_login

// string usrname = 1;
inline void usr_login::clear_usrname() {
  usrname_.ClearToEmpty();
}
inline const std::string& usr_login::usrname() const {
  // @@protoc_insertion_point(field_get:test_2.usr_login.usrname)
  return _internal_usrname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void usr_login::set_usrname(ArgT0&& arg0, ArgT... args) {
 
 usrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.usr_login.usrname)
}
inline std::string* usr_login::mutable_usrname() {
  std::string* _s = _internal_mutable_usrname();
  // @@protoc_insertion_point(field_mutable:test_2.usr_login.usrname)
  return _s;
}
inline const std::string& usr_login::_internal_usrname() const {
  return usrname_.Get();
}
inline void usr_login::_internal_set_usrname(const std::string& value) {
  
  usrname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* usr_login::_internal_mutable_usrname() {
  
  return usrname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* usr_login::release_usrname() {
  // @@protoc_insertion_point(field_release:test_2.usr_login.usrname)
  return usrname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void usr_login::set_allocated_usrname(std::string* usrname) {
  if (usrname != nullptr) {
    
  } else {
    
  }
  usrname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usrname,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usrname_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    usrname_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.usr_login.usrname)
}

// string usrpasswd = 2;
inline void usr_login::clear_usrpasswd() {
  usrpasswd_.ClearToEmpty();
}
inline const std::string& usr_login::usrpasswd() const {
  // @@protoc_insertion_point(field_get:test_2.usr_login.usrpasswd)
  return _internal_usrpasswd();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void usr_login::set_usrpasswd(ArgT0&& arg0, ArgT... args) {
 
 usrpasswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.usr_login.usrpasswd)
}
inline std::string* usr_login::mutable_usrpasswd() {
  std::string* _s = _internal_mutable_usrpasswd();
  // @@protoc_insertion_point(field_mutable:test_2.usr_login.usrpasswd)
  return _s;
}
inline const std::string& usr_login::_internal_usrpasswd() const {
  return usrpasswd_.Get();
}
inline void usr_login::_internal_set_usrpasswd(const std::string& value) {
  
  usrpasswd_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* usr_login::_internal_mutable_usrpasswd() {
  
  return usrpasswd_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* usr_login::release_usrpasswd() {
  // @@protoc_insertion_point(field_release:test_2.usr_login.usrpasswd)
  return usrpasswd_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void usr_login::set_allocated_usrpasswd(std::string* usrpasswd) {
  if (usrpasswd != nullptr) {
    
  } else {
    
  }
  usrpasswd_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), usrpasswd,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (usrpasswd_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    usrpasswd_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.usr_login.usrpasswd)
}

// -------------------------------------------------------------------

// usr_info

// int32 classrome = 1;
inline void usr_info::clear_classrome() {
  classrome_ = 0;
}
inline int32_t usr_info::_internal_classrome() const {
  return classrome_;
}
inline int32_t usr_info::classrome() const {
  // @@protoc_insertion_point(field_get:test_2.usr_info.classrome)
  return _internal_classrome();
}
inline void usr_info::_internal_set_classrome(int32_t value) {
  
  classrome_ = value;
}
inline void usr_info::set_classrome(int32_t value) {
  _internal_set_classrome(value);
  // @@protoc_insertion_point(field_set:test_2.usr_info.classrome)
}

// string studentID = 2;
inline void usr_info::clear_studentid() {
  studentid_.ClearToEmpty();
}
inline const std::string& usr_info::studentid() const {
  // @@protoc_insertion_point(field_get:test_2.usr_info.studentID)
  return _internal_studentid();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void usr_info::set_studentid(ArgT0&& arg0, ArgT... args) {
 
 studentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.usr_info.studentID)
}
inline std::string* usr_info::mutable_studentid() {
  std::string* _s = _internal_mutable_studentid();
  // @@protoc_insertion_point(field_mutable:test_2.usr_info.studentID)
  return _s;
}
inline const std::string& usr_info::_internal_studentid() const {
  return studentid_.Get();
}
inline void usr_info::_internal_set_studentid(const std::string& value) {
  
  studentid_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* usr_info::_internal_mutable_studentid() {
  
  return studentid_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* usr_info::release_studentid() {
  // @@protoc_insertion_point(field_release:test_2.usr_info.studentID)
  return studentid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void usr_info::set_allocated_studentid(std::string* studentid) {
  if (studentid != nullptr) {
    
  } else {
    
  }
  studentid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), studentid,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (studentid_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    studentid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.usr_info.studentID)
}

// -------------------------------------------------------------------

// student

// int32 STAMP = 1;
inline void student::clear_stamp() {
  stamp_ = 0;
}
inline int32_t student::_internal_stamp() const {
  return stamp_;
}
inline int32_t student::stamp() const {
  // @@protoc_insertion_point(field_get:test_2.student.STAMP)
  return _internal_stamp();
}
inline void student::_internal_set_stamp(int32_t value) {
  
  stamp_ = value;
}
inline void student::set_stamp(int32_t value) {
  _internal_set_stamp(value);
  // @@protoc_insertion_point(field_set:test_2.student.STAMP)
}

// .test_2.usr_login usrLogin = 2;
inline bool student::_internal_has_usrlogin() const {
  return this != internal_default_instance() && usrlogin_ != nullptr;
}
inline bool student::has_usrlogin() const {
  return _internal_has_usrlogin();
}
inline void student::clear_usrlogin() {
  if (GetArenaForAllocation() == nullptr && usrlogin_ != nullptr) {
    delete usrlogin_;
  }
  usrlogin_ = nullptr;
}
inline const ::test_2::usr_login& student::_internal_usrlogin() const {
  const ::test_2::usr_login* p = usrlogin_;
  return p != nullptr ? *p : reinterpret_cast<const ::test_2::usr_login&>(
      ::test_2::_usr_login_default_instance_);
}
inline const ::test_2::usr_login& student::usrlogin() const {
  // @@protoc_insertion_point(field_get:test_2.student.usrLogin)
  return _internal_usrlogin();
}
inline void student::unsafe_arena_set_allocated_usrlogin(
    ::test_2::usr_login* usrlogin) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usrlogin_);
  }
  usrlogin_ = usrlogin;
  if (usrlogin) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_2.student.usrLogin)
}
inline ::test_2::usr_login* student::release_usrlogin() {
  
  ::test_2::usr_login* temp = usrlogin_;
  usrlogin_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test_2::usr_login* student::unsafe_arena_release_usrlogin() {
  // @@protoc_insertion_point(field_release:test_2.student.usrLogin)
  
  ::test_2::usr_login* temp = usrlogin_;
  usrlogin_ = nullptr;
  return temp;
}
inline ::test_2::usr_login* student::_internal_mutable_usrlogin() {
  
  if (usrlogin_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_2::usr_login>(GetArenaForAllocation());
    usrlogin_ = p;
  }
  return usrlogin_;
}
inline ::test_2::usr_login* student::mutable_usrlogin() {
  ::test_2::usr_login* _msg = _internal_mutable_usrlogin();
  // @@protoc_insertion_point(field_mutable:test_2.student.usrLogin)
  return _msg;
}
inline void student::set_allocated_usrlogin(::test_2::usr_login* usrlogin) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete usrlogin_;
  }
  if (usrlogin) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::test_2::usr_login>::GetOwningArena(usrlogin);
    if (message_arena != submessage_arena) {
      usrlogin = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usrlogin, submessage_arena);
    }
    
  } else {
    
  }
  usrlogin_ = usrlogin;
  // @@protoc_insertion_point(field_set_allocated:test_2.student.usrLogin)
}

// .test_2.usr_info usrInfo = 3;
inline bool student::_internal_has_usrinfo() const {
  return this != internal_default_instance() && usrinfo_ != nullptr;
}
inline bool student::has_usrinfo() const {
  return _internal_has_usrinfo();
}
inline void student::clear_usrinfo() {
  if (GetArenaForAllocation() == nullptr && usrinfo_ != nullptr) {
    delete usrinfo_;
  }
  usrinfo_ = nullptr;
}
inline const ::test_2::usr_info& student::_internal_usrinfo() const {
  const ::test_2::usr_info* p = usrinfo_;
  return p != nullptr ? *p : reinterpret_cast<const ::test_2::usr_info&>(
      ::test_2::_usr_info_default_instance_);
}
inline const ::test_2::usr_info& student::usrinfo() const {
  // @@protoc_insertion_point(field_get:test_2.student.usrInfo)
  return _internal_usrinfo();
}
inline void student::unsafe_arena_set_allocated_usrinfo(
    ::test_2::usr_info* usrinfo) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(usrinfo_);
  }
  usrinfo_ = usrinfo;
  if (usrinfo) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:test_2.student.usrInfo)
}
inline ::test_2::usr_info* student::release_usrinfo() {
  
  ::test_2::usr_info* temp = usrinfo_;
  usrinfo_ = nullptr;
#ifdef PROTOBUF_FORCE_COPY_IN_RELEASE
  auto* old =  reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(temp);
  temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  if (GetArenaForAllocation() == nullptr) { delete old; }
#else  // PROTOBUF_FORCE_COPY_IN_RELEASE
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
#endif  // !PROTOBUF_FORCE_COPY_IN_RELEASE
  return temp;
}
inline ::test_2::usr_info* student::unsafe_arena_release_usrinfo() {
  // @@protoc_insertion_point(field_release:test_2.student.usrInfo)
  
  ::test_2::usr_info* temp = usrinfo_;
  usrinfo_ = nullptr;
  return temp;
}
inline ::test_2::usr_info* student::_internal_mutable_usrinfo() {
  
  if (usrinfo_ == nullptr) {
    auto* p = CreateMaybeMessage<::test_2::usr_info>(GetArenaForAllocation());
    usrinfo_ = p;
  }
  return usrinfo_;
}
inline ::test_2::usr_info* student::mutable_usrinfo() {
  ::test_2::usr_info* _msg = _internal_mutable_usrinfo();
  // @@protoc_insertion_point(field_mutable:test_2.student.usrInfo)
  return _msg;
}
inline void student::set_allocated_usrinfo(::test_2::usr_info* usrinfo) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete usrinfo_;
  }
  if (usrinfo) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::test_2::usr_info>::GetOwningArena(usrinfo);
    if (message_arena != submessage_arena) {
      usrinfo = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, usrinfo, submessage_arena);
    }
    
  } else {
    
  }
  usrinfo_ = usrinfo;
  // @@protoc_insertion_point(field_set_allocated:test_2.student.usrInfo)
}

// repeated int32 array = 4;
inline int student::_internal_array_size() const {
  return array_.size();
}
inline int student::array_size() const {
  return _internal_array_size();
}
inline void student::clear_array() {
  array_.Clear();
}
inline int32_t student::_internal_array(int index) const {
  return array_.Get(index);
}
inline int32_t student::array(int index) const {
  // @@protoc_insertion_point(field_get:test_2.student.array)
  return _internal_array(index);
}
inline void student::set_array(int index, int32_t value) {
  array_.Set(index, value);
  // @@protoc_insertion_point(field_set:test_2.student.array)
}
inline void student::_internal_add_array(int32_t value) {
  array_.Add(value);
}
inline void student::add_array(int32_t value) {
  _internal_add_array(value);
  // @@protoc_insertion_point(field_add:test_2.student.array)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
student::_internal_array() const {
  return array_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
student::array() const {
  // @@protoc_insertion_point(field_list:test_2.student.array)
  return _internal_array();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
student::_internal_mutable_array() {
  return &array_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
student::mutable_array() {
  // @@protoc_insertion_point(field_mutable_list:test_2.student.array)
  return _internal_mutable_array();
}

// -------------------------------------------------------------------

// row_data

// int32 column_count = 1;
inline void row_data::clear_column_count() {
  column_count_ = 0;
}
inline int32_t row_data::_internal_column_count() const {
  return column_count_;
}
inline int32_t row_data::column_count() const {
  // @@protoc_insertion_point(field_get:test_2.row_data.column_count)
  return _internal_column_count();
}
inline void row_data::_internal_set_column_count(int32_t value) {
  
  column_count_ = value;
}
inline void row_data::set_column_count(int32_t value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:test_2.row_data.column_count)
}

// repeated string value_datas = 2;
inline int row_data::_internal_value_datas_size() const {
  return value_datas_.size();
}
inline int row_data::value_datas_size() const {
  return _internal_value_datas_size();
}
inline void row_data::clear_value_datas() {
  value_datas_.Clear();
}
inline std::string* row_data::add_value_datas() {
  std::string* _s = _internal_add_value_datas();
  // @@protoc_insertion_point(field_add_mutable:test_2.row_data.value_datas)
  return _s;
}
inline const std::string& row_data::_internal_value_datas(int index) const {
  return value_datas_.Get(index);
}
inline const std::string& row_data::value_datas(int index) const {
  // @@protoc_insertion_point(field_get:test_2.row_data.value_datas)
  return _internal_value_datas(index);
}
inline std::string* row_data::mutable_value_datas(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.row_data.value_datas)
  return value_datas_.Mutable(index);
}
inline void row_data::set_value_datas(int index, const std::string& value) {
  value_datas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.row_data.value_datas)
}
inline void row_data::set_value_datas(int index, std::string&& value) {
  value_datas_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.row_data.value_datas)
}
inline void row_data::set_value_datas(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_datas_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.row_data.value_datas)
}
inline void row_data::set_value_datas(int index, const char* value, size_t size) {
  value_datas_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.row_data.value_datas)
}
inline std::string* row_data::_internal_add_value_datas() {
  return value_datas_.Add();
}
inline void row_data::add_value_datas(const std::string& value) {
  value_datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.row_data.value_datas)
}
inline void row_data::add_value_datas(std::string&& value) {
  value_datas_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.row_data.value_datas)
}
inline void row_data::add_value_datas(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  value_datas_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.row_data.value_datas)
}
inline void row_data::add_value_datas(const char* value, size_t size) {
  value_datas_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.row_data.value_datas)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
row_data::value_datas() const {
  // @@protoc_insertion_point(field_list:test_2.row_data.value_datas)
  return value_datas_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
row_data::mutable_value_datas() {
  // @@protoc_insertion_point(field_mutable_list:test_2.row_data.value_datas)
  return &value_datas_;
}

// -------------------------------------------------------------------

// field_squence

// repeated int32 levels = 1;
inline int field_squence::_internal_levels_size() const {
  return levels_.size();
}
inline int field_squence::levels_size() const {
  return _internal_levels_size();
}
inline void field_squence::clear_levels() {
  levels_.Clear();
}
inline int32_t field_squence::_internal_levels(int index) const {
  return levels_.Get(index);
}
inline int32_t field_squence::levels(int index) const {
  // @@protoc_insertion_point(field_get:test_2.field_squence.levels)
  return _internal_levels(index);
}
inline void field_squence::set_levels(int index, int32_t value) {
  levels_.Set(index, value);
  // @@protoc_insertion_point(field_set:test_2.field_squence.levels)
}
inline void field_squence::_internal_add_levels(int32_t value) {
  levels_.Add(value);
}
inline void field_squence::add_levels(int32_t value) {
  _internal_add_levels(value);
  // @@protoc_insertion_point(field_add:test_2.field_squence.levels)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
field_squence::_internal_levels() const {
  return levels_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >&
field_squence::levels() const {
  // @@protoc_insertion_point(field_list:test_2.field_squence.levels)
  return _internal_levels();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
field_squence::_internal_mutable_levels() {
  return &levels_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< int32_t >*
field_squence::mutable_levels() {
  // @@protoc_insertion_point(field_mutable_list:test_2.field_squence.levels)
  return _internal_mutable_levels();
}

// repeated string field = 2;
inline int field_squence::_internal_field_size() const {
  return field_.size();
}
inline int field_squence::field_size() const {
  return _internal_field_size();
}
inline void field_squence::clear_field() {
  field_.Clear();
}
inline std::string* field_squence::add_field() {
  std::string* _s = _internal_add_field();
  // @@protoc_insertion_point(field_add_mutable:test_2.field_squence.field)
  return _s;
}
inline const std::string& field_squence::_internal_field(int index) const {
  return field_.Get(index);
}
inline const std::string& field_squence::field(int index) const {
  // @@protoc_insertion_point(field_get:test_2.field_squence.field)
  return _internal_field(index);
}
inline std::string* field_squence::mutable_field(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.field_squence.field)
  return field_.Mutable(index);
}
inline void field_squence::set_field(int index, const std::string& value) {
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.field_squence.field)
}
inline void field_squence::set_field(int index, std::string&& value) {
  field_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.field_squence.field)
}
inline void field_squence::set_field(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.field_squence.field)
}
inline void field_squence::set_field(int index, const char* value, size_t size) {
  field_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.field_squence.field)
}
inline std::string* field_squence::_internal_add_field() {
  return field_.Add();
}
inline void field_squence::add_field(const std::string& value) {
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.field_squence.field)
}
inline void field_squence::add_field(std::string&& value) {
  field_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.field_squence.field)
}
inline void field_squence::add_field(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  field_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.field_squence.field)
}
inline void field_squence::add_field(const char* value, size_t size) {
  field_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.field_squence.field)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
field_squence::field() const {
  // @@protoc_insertion_point(field_list:test_2.field_squence.field)
  return field_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
field_squence::mutable_field() {
  // @@protoc_insertion_point(field_mutable_list:test_2.field_squence.field)
  return &field_;
}

// -------------------------------------------------------------------

// table_info

// string table_name = 1;
inline void table_info::clear_table_name() {
  table_name_.ClearToEmpty();
}
inline const std::string& table_info::table_name() const {
  // @@protoc_insertion_point(field_get:test_2.table_info.table_name)
  return _internal_table_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void table_info::set_table_name(ArgT0&& arg0, ArgT... args) {
 
 table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:test_2.table_info.table_name)
}
inline std::string* table_info::mutable_table_name() {
  std::string* _s = _internal_mutable_table_name();
  // @@protoc_insertion_point(field_mutable:test_2.table_info.table_name)
  return _s;
}
inline const std::string& table_info::_internal_table_name() const {
  return table_name_.Get();
}
inline void table_info::_internal_set_table_name(const std::string& value) {
  
  table_name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* table_info::_internal_mutable_table_name() {
  
  return table_name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* table_info::release_table_name() {
  // @@protoc_insertion_point(field_release:test_2.table_info.table_name)
  return table_name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void table_info::set_allocated_table_name(std::string* table_name) {
  if (table_name != nullptr) {
    
  } else {
    
  }
  table_name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), table_name,
      GetArenaForAllocation());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (table_name_.IsDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited())) {
    table_name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  }
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:test_2.table_info.table_name)
}

// int32 row_count = 2;
inline void table_info::clear_row_count() {
  row_count_ = 0;
}
inline int32_t table_info::_internal_row_count() const {
  return row_count_;
}
inline int32_t table_info::row_count() const {
  // @@protoc_insertion_point(field_get:test_2.table_info.row_count)
  return _internal_row_count();
}
inline void table_info::_internal_set_row_count(int32_t value) {
  
  row_count_ = value;
}
inline void table_info::set_row_count(int32_t value) {
  _internal_set_row_count(value);
  // @@protoc_insertion_point(field_set:test_2.table_info.row_count)
}

// int32 column_count = 3;
inline void table_info::clear_column_count() {
  column_count_ = 0;
}
inline int32_t table_info::_internal_column_count() const {
  return column_count_;
}
inline int32_t table_info::column_count() const {
  // @@protoc_insertion_point(field_get:test_2.table_info.column_count)
  return _internal_column_count();
}
inline void table_info::_internal_set_column_count(int32_t value) {
  
  column_count_ = value;
}
inline void table_info::set_column_count(int32_t value) {
  _internal_set_column_count(value);
  // @@protoc_insertion_point(field_set:test_2.table_info.column_count)
}

// repeated string filed_names = 4;
inline int table_info::_internal_filed_names_size() const {
  return filed_names_.size();
}
inline int table_info::filed_names_size() const {
  return _internal_filed_names_size();
}
inline void table_info::clear_filed_names() {
  filed_names_.Clear();
}
inline std::string* table_info::add_filed_names() {
  std::string* _s = _internal_add_filed_names();
  // @@protoc_insertion_point(field_add_mutable:test_2.table_info.filed_names)
  return _s;
}
inline const std::string& table_info::_internal_filed_names(int index) const {
  return filed_names_.Get(index);
}
inline const std::string& table_info::filed_names(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_info.filed_names)
  return _internal_filed_names(index);
}
inline std::string* table_info::mutable_filed_names(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_info.filed_names)
  return filed_names_.Mutable(index);
}
inline void table_info::set_filed_names(int index, const std::string& value) {
  filed_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.table_info.filed_names)
}
inline void table_info::set_filed_names(int index, std::string&& value) {
  filed_names_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.table_info.filed_names)
}
inline void table_info::set_filed_names(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filed_names_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.table_info.filed_names)
}
inline void table_info::set_filed_names(int index, const char* value, size_t size) {
  filed_names_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.table_info.filed_names)
}
inline std::string* table_info::_internal_add_filed_names() {
  return filed_names_.Add();
}
inline void table_info::add_filed_names(const std::string& value) {
  filed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.table_info.filed_names)
}
inline void table_info::add_filed_names(std::string&& value) {
  filed_names_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.table_info.filed_names)
}
inline void table_info::add_filed_names(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filed_names_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.table_info.filed_names)
}
inline void table_info::add_filed_names(const char* value, size_t size) {
  filed_names_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.table_info.filed_names)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
table_info::filed_names() const {
  // @@protoc_insertion_point(field_list:test_2.table_info.filed_names)
  return filed_names_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
table_info::mutable_filed_names() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_info.filed_names)
  return &filed_names_;
}

// repeated string filed_types = 5;
inline int table_info::_internal_filed_types_size() const {
  return filed_types_.size();
}
inline int table_info::filed_types_size() const {
  return _internal_filed_types_size();
}
inline void table_info::clear_filed_types() {
  filed_types_.Clear();
}
inline std::string* table_info::add_filed_types() {
  std::string* _s = _internal_add_filed_types();
  // @@protoc_insertion_point(field_add_mutable:test_2.table_info.filed_types)
  return _s;
}
inline const std::string& table_info::_internal_filed_types(int index) const {
  return filed_types_.Get(index);
}
inline const std::string& table_info::filed_types(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_info.filed_types)
  return _internal_filed_types(index);
}
inline std::string* table_info::mutable_filed_types(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_info.filed_types)
  return filed_types_.Mutable(index);
}
inline void table_info::set_filed_types(int index, const std::string& value) {
  filed_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:test_2.table_info.filed_types)
}
inline void table_info::set_filed_types(int index, std::string&& value) {
  filed_types_.Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:test_2.table_info.filed_types)
}
inline void table_info::set_filed_types(int index, const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filed_types_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:test_2.table_info.filed_types)
}
inline void table_info::set_filed_types(int index, const char* value, size_t size) {
  filed_types_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:test_2.table_info.filed_types)
}
inline std::string* table_info::_internal_add_filed_types() {
  return filed_types_.Add();
}
inline void table_info::add_filed_types(const std::string& value) {
  filed_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:test_2.table_info.filed_types)
}
inline void table_info::add_filed_types(std::string&& value) {
  filed_types_.Add(std::move(value));
  // @@protoc_insertion_point(field_add:test_2.table_info.filed_types)
}
inline void table_info::add_filed_types(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  filed_types_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:test_2.table_info.filed_types)
}
inline void table_info::add_filed_types(const char* value, size_t size) {
  filed_types_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:test_2.table_info.filed_types)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>&
table_info::filed_types() const {
  // @@protoc_insertion_point(field_list:test_2.table_info.filed_types)
  return filed_types_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField<std::string>*
table_info::mutable_filed_types() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_info.filed_types)
  return &filed_types_;
}

// repeated .test_2.field_squence filed_sequences = 6;
inline int table_info::_internal_filed_sequences_size() const {
  return filed_sequences_.size();
}
inline int table_info::filed_sequences_size() const {
  return _internal_filed_sequences_size();
}
inline void table_info::clear_filed_sequences() {
  filed_sequences_.Clear();
}
inline ::test_2::field_squence* table_info::mutable_filed_sequences(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_info.filed_sequences)
  return filed_sequences_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >*
table_info::mutable_filed_sequences() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_info.filed_sequences)
  return &filed_sequences_;
}
inline const ::test_2::field_squence& table_info::_internal_filed_sequences(int index) const {
  return filed_sequences_.Get(index);
}
inline const ::test_2::field_squence& table_info::filed_sequences(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_info.filed_sequences)
  return _internal_filed_sequences(index);
}
inline ::test_2::field_squence* table_info::_internal_add_filed_sequences() {
  return filed_sequences_.Add();
}
inline ::test_2::field_squence* table_info::add_filed_sequences() {
  ::test_2::field_squence* _add = _internal_add_filed_sequences();
  // @@protoc_insertion_point(field_add:test_2.table_info.filed_sequences)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::field_squence >&
table_info::filed_sequences() const {
  // @@protoc_insertion_point(field_list:test_2.table_info.filed_sequences)
  return filed_sequences_;
}

// repeated .test_2.row_data row_lists = 7;
inline int table_info::_internal_row_lists_size() const {
  return row_lists_.size();
}
inline int table_info::row_lists_size() const {
  return _internal_row_lists_size();
}
inline void table_info::clear_row_lists() {
  row_lists_.Clear();
}
inline ::test_2::row_data* table_info::mutable_row_lists(int index) {
  // @@protoc_insertion_point(field_mutable:test_2.table_info.row_lists)
  return row_lists_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >*
table_info::mutable_row_lists() {
  // @@protoc_insertion_point(field_mutable_list:test_2.table_info.row_lists)
  return &row_lists_;
}
inline const ::test_2::row_data& table_info::_internal_row_lists(int index) const {
  return row_lists_.Get(index);
}
inline const ::test_2::row_data& table_info::row_lists(int index) const {
  // @@protoc_insertion_point(field_get:test_2.table_info.row_lists)
  return _internal_row_lists(index);
}
inline ::test_2::row_data* table_info::_internal_add_row_lists() {
  return row_lists_.Add();
}
inline ::test_2::row_data* table_info::add_row_lists() {
  ::test_2::row_data* _add = _internal_add_row_lists();
  // @@protoc_insertion_point(field_add:test_2.table_info.row_lists)
  return _add;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::test_2::row_data >&
table_info::row_lists() const {
  // @@protoc_insertion_point(field_list:test_2.table_info.row_lists)
  return row_lists_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace test_2

PROTOBUF_NAMESPACE_OPEN

template <> struct is_proto_enum< ::test_2::DATA_TYPE> : ::std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::test_2::DATA_TYPE>() {
  return ::test_2::DATA_TYPE_descriptor();
}

PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_msg_2eproto
